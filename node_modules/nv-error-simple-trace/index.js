const _fst = (x, dummy)      => x;
const _snd = (dummy, x)      => x;
const _E   = Error;

function _stack() {
	const _prepareStackTrace = _E.prepareStackTrace;
	_E.prepareStackTrace     = _snd;
	const stack = new _E().stack.slice(1); 
	_E.prepareStackTrace     = _prepareStackTrace;
	return stack;
}



const _get_ctor = ()=>_stack()[0].constructor

const CallSite = _get_ctor();

class BriefInfo {
    FileName              = undefined;
    ScriptNameOrSourceURL = undefined;
    isToplevel            = undefined;
    isEval                = undefined;
    isNative              = undefined;
    isAsync               = undefined;
    isConstructor         = undefined;
    isPromiseAll          = undefined;
    LineNumber            = undefined;
    EnclosingLineNumber   = undefined;
    ColumnNumber          = undefined;
    EnclosingColumnNumber = undefined;
    EvalOrigin            = undefined;
    Position              = undefined;
    TypeName              = undefined;
    FunctionName          = undefined;
    MethodName            = undefined;
    PromiseIndex          = undefined;
}

class Info extends BriefInfo {
	This                  = undefined;
	Function              = undefined;
}


CallSite.prototype.dict = function(detail=true) {
    let info                   = new  Info();
    info.FileName              = this.getFileName();
    info.ScriptNameOrSourceURL = this.getScriptNameOrSourceURL();
    info.isToplevel            = this.isToplevel();
    info.isEval                = this.isEval();
    info.isNative              = this.isNative();
    info.isAsync               = this.isAsync();
    info.isConstructor         = this.isConstructor();
    info.isPromiseAll          = this.isPromiseAll();
    info.LineNumber            = this.getLineNumber();
    info.EnclosingLineNumber   = this.getEnclosingLineNumber();
    info.ColumnNumber          = this.getColumnNumber();
    info.EnclosingColumnNumber = this.getEnclosingColumnNumber();
    info.EvalOrigin            = this.getEvalOrigin();
    info.Position              = this.getPosition();
    info.TypeName              = this.getTypeName();
    if(detail) {
        info.This                  = this.getThis();
    } else {
        delete info.This
    }
    info.FunctionName          = this.getFunctionName();
    info.MethodName            = this.getMethodName();
    if(detail) {
        info.Function              = this.getFunction();
    } else {
        delete info.Function
    }
    info.PromiseIndex          = this.getPromiseIndex();
    return(info)
}


function detail_stack() {
    let ary = _stack();
    ary = ary.slice(1);
    ary = ary.map(cs=>cs.dict(true));
    return(ary)
}

function brief_stack() {
    let ary = _stack();
    ary = ary.slice(1);
    ary = ary.map(cs=>cs.dict(false));
    return(ary)
}

function detail_ance(n=1) {
    let ary = _stack();
    let cs = ary[n+1];
    return(cs.dict(true))
}

function brief_ance(n=1) {
    let ary = _stack();
    let cs = ary[n+1];
    return(cs.dict(false))
}

function detail_parent() {
    let ary = _stack();
    let cs = ary[2];
    return(cs.dict(true))
}

function brief_parent() {
    let ary = _stack();
    let cs = ary[2];
    return(cs.dict(false))
}


module.exports = {
   Info, 
   detail_stack,
   brief_stack,
   detail_ance, 
   brief_ance,
   detail_parent,
   brief_ance, 
   ////
   CallSite,
   _stack,
   ////
}



