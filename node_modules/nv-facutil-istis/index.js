

const _BL   = Boolean;
const _N    = Number;
const _S    = String;
const _BI   = BigInt;

const _DT   = Date;
const _RGX  = RegExp;
const _AB   = ArrayBuffer;

////-<SharedArrayBuffer>
if(globalThis.SharedArrayBuffer) {

} else {
    // to avoid browser error   
    window.SharedArrayBuffer       = ArrayBuffer;
    globalThis.SharedArrayBuffer   = ArrayBuffer;
}
const _SAB  = globalThis.SharedArrayBuffer;
////</SharedArrayBuffer>

const _DV   = DataView;
const _A    = Array;
const _ST   = Set;
const _MP   = Map;
const _O    = Object;


const _U8A  = Uint8Array;
const _U8CA = Uint8ClampedArray;
const _I8A  = Int8Array;
const _U16A = Uint16Array;
const _I16A = Int16Array;
const _U32A = Uint32Array;
const _I32A = Int32Array;
const _U64A = BigUint64Array;
const _I64A = BigInt64Array;
const _F32A = Float32Array;
const _F64A = Float64Array;


const _WKST   = WeakSet;
const _WKMP   = WeakMap;
const _WKREF  = WeakRef;

const _ERR      = Error;
const _EVL_ERR  = EvalError;
const _RNG_ERR  = RangeError;
const _REF_ERR  = ReferenceError;
const _TYP_ERR  = TypeError;
const _URI_ERR  = URIError;
const _AGG_ERRS = AggregateError;


const {istof} = require("nv-facutil-typis");

const is_dt  = (o) => istof(o,_DT);
const is_rgx = (o) => istof(o,_RGX);

const is_ab   = (o) => istof(o,_AB);
const is_sab = (o) => istof(o,_SAB);
const is_dv   = (o) => istof(o,_DV);

const is_u8a  = (o)=>istof(o,_U8A);
const is_u8ca = (o)=>istof(o,_U8CA);
const is_i8a  = (o)=>istof(o,_I8A);
const is_u16a = (o)=>istof(o,_U16A);
const is_i16a = (o)=>istof(o,_I16A);
const is_u32a = (o)=>istof(o,_U32A);
const is_i32a = (o)=>istof(o,_I32A);
const is_u64a = (o)=>istof(o,_U64A);
const is_i64a = (o)=>istof(o,_I64A);
const is_f32a = (o)=>istof(o,_F32A);
const is_f64a = (o)=>istof(o,_F64A);
//--- typed array
const is_abvw = (o) => is_u8a(o) || is_u8ca(o) || is_i8a(o) || is_u16a(o) || is_i16a(o) || is_u32a(o) || is_i32a(o) || is_u64a(o) || is_i64a(o) || is_f32a(o) || is_f64a(o);


////
const is_ary = _A.isArray;
const is_st  = (o) => istof(o,_ST);
const is_mp  = (o) => istof(o,_MP);

////
const is_wkst   = (o) => istof(o,_WKST);
const is_wkmp   = (o) => istof(o,_WKMP);
const is_wkref  = (o) => istof(o,_WKREF); 
const is_weak   = (o) => is_wkst(o) || is_wkmp(o) || is_wkref(o);

////
const is_blo    = (o)=> istof(o,_BL);
const is_truo   = (o)=> istof(o,_BL) && o.valueOf();
const is_flso   = (o)=> istof(o,_BL) && !o.valueOf();
const is_numo   = (o)=> istof(o,_N);
const is_stro   = (o)=> istof(o,_S);
const is_bio    = (o)=> istof(o,_BI);
const is_prim_wrap = (o)=> is_blo(o) || is_numo(o) || is_stro(o) || is_bio(o);

////
const is_err           = (o)=>istof(o,_ERR);
const is_eval_err      = (o)=>istof(o,_EVL_ERR);
const is_rng_err       = (o)=>istof(o,_RNG_ERR);
const is_ref_err       = (o)=>istof(o,_REF_ERR);
const is_typ_err       = (o)=>istof(o,_TYP_ERR);
const is_uri_err       = (o)=>istof(o,_URI_ERR);
const is_agg_errs      = (o)=>istof(o,_AGG_ERRS) 

module.exports = {
   _DT,_RGX,
   _BL,_N,_S,_BI,
   _AB,_SAB,_DV,_U8A,_U8CA,_I8A,_U16A,_I16A,_U32A,_I32A,_U64A,_I64A,_F32A,_F64A,
   _A,_ST,_MP, 
   _WKST,_WKMP,_WKREF,
   _ERR, _AGG_ERRS, _EVL_ERR,_RNG_ERR,_REF_ERR,_TYP_ERR,_URI_ERR,
   ////
   is_dt, is_rgx,
   /// 
   is_ab, is_dv, is_sab,
   // 
   is_abvw, //ta
      is_u8a,is_u8ca,is_i8a,is_u16a,is_i16a,is_u32a,is_i32a,is_u64a,is_i64a,is_f32a,is_f64a,
   //// 
   is_ary,is_st,is_mp,
   ////
   is_weak,
       is_wkst,is_wkmp,is_wkref,
   is_prim_wrap,
       is_blo,is_truo,is_flso,is_numo,is_stro,is_bio,
   is_err,
       is_eval_err, is_rng_err, is_ref_err,is_typ_err,is_uri_err,
       is_agg_errs,	
}
