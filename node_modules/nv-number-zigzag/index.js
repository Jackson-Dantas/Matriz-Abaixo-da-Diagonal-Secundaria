const MIN_SMI = -(2**31);
const MAX_SMI = 2**31 -1;

const MIN_SMI_BI = -(2n**31n);
const MAX_SMI_BI = 2n**31n - 1n;


const is_smi    = (v)=> (v>=MIN_SMI)    &&(v<=MAX_SMI   );
const is_smi_bi = (v)=> (v>=MIN_SMI_BI) &&(v<=MAX_SMI_BI); 
const _bi      = (v)=> BigInt(v);
const _num     = (v)=> Number(v); 


const MIN_SMI_CAN_BE_ENCDED      = -(2**30);
const MAX_SMI_CAN_BE_ENCDED      = 2**30-1;
const MIN_SMI_BI_CAN_BE_ENCDED   = -(2n**30n);
const MAX_SMI_BI_CAN_BE_ENCDED   = 2n**30n-1n;

const is_smi_can_be_encded       = (v)=>(v>=MIN_SMI_CAN_BE_ENCDED) && (v<=MAX_SMI_CAN_BE_ENCDED);

const _encd_smi            = (v) => (((v) << 1) ^   (v >> 31));
const _encd_bi             = (v) => (((v) << 1n) ^ (v >> 63n));
const _encd_between_smi_bi = (v) => _num(_encd_bi(_bi(v)))    ;

const _decd_smi              = (v) => ((v >> 1)  ^ (-(v & 1)));  
const _decd_bi               = (v) => ((v >> 1n) ^ (-(v & 1n))); 
const _decd_between_smi_bi   = (v) => (_num(_decd_bi(_bi(v)))); 

const encd = (o)=> {
    if(typeof(o)==='bigint') {
        return(_encd_bi(o));
    } else {
        if(is_smi_can_be_encded(o)) {
            return(_encd_smi(o))
        } else {
            return(_encd_between_smi_bi(o))
        }
    }
}

const decd = (o)=> {
    if(typeof(o)==='bigint') {
        return(_decd_bi(o));
    } else {
        if(is_smi(o)) {
            return(_decd_smi(o))
        } else {
            return(_decd_between_smi_bi(o))
        }
    }
}


module.exports = {
    MIN_SMI,        MAX_SMI,
    MIN_SMI_BI,     MAX_SMI_BI,
    is_smi, is_smi_bi,
    _bi,_num,

    ////
    _encd_smi,_encd_bi,_encd_between_smi_bi,
    _decd_smi,_decd_bi,_decd_between_smi_bi,
    ////
    MIN_SMI_CAN_BE_ENCDED,MAX_SMI_CAN_BE_ENCDED,MIN_SMI_BI_CAN_BE_ENCDED,MAX_SMI_BI_CAN_BE_ENCDED,
    is_smi_can_be_encded,
    encd,decd
    
}
