const {sync} = require("nv-facutil-simple-test");
const v8 = require("v8");
const eq = (b0,b1)=> {
    var u8a = new Uint8Array(b1);
    for(let i =0;i<b0.length;++i) {
        if(b0[i] === u8a[i]) {

        } else {
	    console.log(b0.slice(i))	
	    console.log(Buffer.from(b1.slice(i)))	
            throw(i)
        }
    }
}
var fj = (o)=> JSON.stringify(o);
const {encd}  = require("../w");

const ENCD_UN = 0X5F;
const ENCD_NU = 0X30;

var f0 = (o)=> v8.serialize(o);
var f1 = (o)=> encd(o,15);             //version default is 15 , using 13 just for test

var st = new Set([])
for(let e of [1,1.1,undefined,null,true,false,"abcd","aÿ我𝑒",12345678901234567890n,[],{}]) {st.add(e)}
eq(f0(st),f1(st))

var mp = new Map()
eq(f0(mp),f1(mp))

for(let e of [[]]) {mp.set(e,e)}
eq(f0(mp),f1(mp))




for(let e of [1,1.1,undefined,null,true,false,"abcd","aÿ我𝑒",12345678901234567890n]) {mp.set(e,e)}
eq(f0(mp),f1(mp))


for(let e of [1,1.1,undefined,null,true,false,"abcd","aÿ我𝑒",12345678901234567890n,[],{}]) {mp.set(e,e)}
eq(f0(mp),f1(mp))

var circular = [];
circular[0]  = circular
circular[1] = {pr:circular[0]}
circular[2]  = mp
mp.set("st",st);
st.add(mp);

st["top"] = circular;
mp["top"] = circular;


console.dir(circular,{depth:null})

eq(f0(circular),f1(circular))

console.log(sync(1000000,f0,circular));
console.log(sync(1000000,f1,circular));
