const {deepStrictEqual} = require("assert");
const {sync} = require("nv-facutil-simple-test");
const v8 = require("v8");

const {decd}  = require("../r");

const ENCD_UN = 0X5F;
const ENCD_NU = 0X30;

const to_ab = (buf) => buf.buffer.slice(buf.byteOffset,buf.byteOffset+buf.byteLength); 


var u8a            =  new Uint8Array([200,201,202])
var u8ca           =  new Uint8ClampedArray([1,2,3,4,5,6,7,8]);
var i8a            =  new Int8Array([100,-50,255]);
var u16a           =  new Uint16Array([65533,65534,65535])
var i16a           =  new Int16Array([100,200,300])
var u32a           =  new Uint32Array([2**31,2**32-1])
var i32a           =  new Int32Array([2**29,2**30])
var f32a           =  new Float32Array([1.1,2.2,3.3])
var f64a           =  new Float32Array([-(2**52),2**53-1.1])
var bu64a          =  new BigUint64Array([2n**63n,2n**64n-1n])
var bi64a          =  new BigInt64Array([2n**63n,2n**62n])

var ab = new ArrayBuffer(4)
var dv = new DataView(ab)
dv.setUint8(0,1)
dv.setUint8(0,2)
dv.setUint8(0,3)
dv.setUint8(0,4)


var abvws             = [u8a,u8ca,i8a,u16a,i16a,u32a,i32a,f32a,f64a,dv,ab,bi64a,bu64a,/*sab*/] 
var bufs              = abvws.map(r=>v8.serialize(r));
var abs               = bufs.map(buf=>to_ab(buf));

var f0 = (buf)=> v8.deserialize(buf);
var f1 = (ab)=> decd(ab);  


for(let i=0;i<abvws.length;++i) {deepStrictEqual(f1(abs[i]),abvws[i])}

console.log("OK")

var ff0 = ()=>bufs.forEach(buf=>f0(buf));
var ff1 = ()=>abs.forEach(ab=>f1(ab));
console.log(sync(1000000,ff0));
console.log(sync(1000000,ff1));
