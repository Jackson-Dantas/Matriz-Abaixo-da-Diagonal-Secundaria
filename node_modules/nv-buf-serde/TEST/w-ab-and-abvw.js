
const {sync} = require("nv-facutil-simple-test");
const v8 = require("v8");
const eq = (b0,b1)=> {
    var u8a = new Uint8Array(b1);
    for(let i =0;i<b0.length;++i) {
        if(b0[i] === u8a[i]) {

        } else {
            //console.log(b0.slice(i));
            //console.log(Buffer.from(b1.slice(i)));
            throw(i);
        }
    }
}
var fj = (o)=> JSON.stringify(o);
const {encd}  = require("../w");



var f0 = (o)=> v8.serialize(o);
var f1 = (o)=> encd(o,15);             //version default is 15 , using 13 just for test


var u8a            =  new Uint8Array([200,201,202])
var u8ca           =  new Uint8ClampedArray([1,2,3,4,5,6,7,8]);
var i8a            =  new Int8Array([100,-50,255]);
var u16a           =  new Uint16Array([65533,65534,65535])
var i16a           =  new Int16Array([100,200,300])
var u32a           =  new Uint32Array([2**31,2**32-1])
var i32a           =  new Int32Array([2**29,2**30])
var f32a           =  new Float32Array([1.1,2.2,3.3])
var f64a           =  new Float32Array([-(2**52),2**53-1.1])
var bu64a          =  new BigUint64Array([2n**63n,2n**64n-1n])
var bi64a          =  new BigInt64Array([2n**63n,2n**62n])

var ab = new ArrayBuffer(4)
var dv = new DataView(ab)
dv.setUint8(0,1)
dv.setUint8(0,2)
dv.setUint8(0,3)
dv.setUint8(0,4)

/*var sab = new SharedArrayBuffer(4); nodejs-not-support-sab*/

var arr = [u8a,u8ca,i8a,u16a,i16a,u32a,i32a,f32a,f64a,dv,ab,bi64a,bu64a,/*sab*/]

for(let i=0;i<arr.length;++i) {
    eq(f0(arr[i]),f1(arr[i]));
}


arr  = Array.from({length:50000}).map(r=>arr.slice(0));
arr  = arr.flat();


var ff0 = ()=>arr.forEach(e=>f0(e));
var ff1 = ()=>arr.forEach(e=>f1(e));
console.log(sync(1,ff0));
console.log(sync(1,ff1));
