const {deepStrictEqual} = require("assert");
const {sync} = require("nv-facutil-simple-test");
const v8 = require("v8");

const {decd}  = require("../r");

const ENCD_UN = 0X5F;
const ENCD_NU = 0X30;

const to_ab = (buf) => buf.buffer.slice(buf.byteOffset,buf.byteOffset+buf.byteLength); 
var f0 = (buf)=> v8.deserialize(buf);
var f1 = (ab)=> decd(ab);


var st = new Set([])
for(let e of [1,1.1,undefined,null,true,false,"abcd","aÿ我𝑒",12345678901234567890n,[],{}]) {st.add(e)}


var dbls              = [st]
var bufs              = dbls.map(r=>v8.serialize(r));
var abs               = bufs.map(buf=>to_ab(buf));



for(let i=0;i<dbls.length;++i) {deepStrictEqual(f1(abs[i]),f0(bufs[i]))}

console.log("OK")



var mp = new Map();

var dbls              = [mp]
var bufs              = dbls.map(r=>v8.serialize(r));
var abs               = bufs.map(buf=>to_ab(buf));



for(let i=0;i<dbls.length;++i) {deepStrictEqual(f1(abs[i]),f0(bufs[i]))}

console.log("OK")


let dict = {a:100,b:-0}
let ary  = [0,1,2,3]
for(let e of [[{},[]],[true,false],[dict,dict],[ary,ary]]) {mp.set(e,e)}
for(let e of [[]]) {mp.set(e,e)}
for(let e of [1,1.1,undefined,null,true,false,"abcd","aÿ我𝑒",12345678901234567890n]) {mp.set(e,e)}

var dbls              = [mp]
var bufs              = dbls.map(r=>v8.serialize(r));
var abs               = bufs.map(buf=>to_ab(buf));



for(let i=0;i<dbls.length;++i) {deepStrictEqual(f1(abs[i]),f0(bufs[i]))}

console.log("OK")


var circular = [];
circular[0]  = circular
circular[1] = {pr:circular[0]}
circular[2]  = mp
st.add(mp);
mp.set("set",st);

var dbls              = [circular]
var bufs              = dbls.map(r=>v8.serialize(r));
var abs               = bufs.map(buf=>to_ab(buf));



for(let i=0;i<dbls.length;++i) {deepStrictEqual(f1(abs[i]),f0(bufs[i]))}

console.log("OK")




st["top"] = circular;     // this will be drop, compatible with v8-impl
mp["top"] = circular;    // this will be drop ,  compatible with v8-impl




var dbls              = [circular]
var bufs              = dbls.map(r=>v8.serialize(r));
var abs               = bufs.map(buf=>to_ab(buf));



for(let i=0;i<dbls.length;++i) {deepStrictEqual(f1(abs[i]),f0(bufs[i]))}

console.log("OK")
circular = Array.from({length:500}).map(r=>circular.slice(0));
circular = circular.flat();
var dbls              = [circular]
var bufs              = dbls.map(r=>v8.serialize(r));
var abs               = bufs.map(buf=>to_ab(buf));

var ff0 = ()=>bufs.forEach(buf=>f0(buf));
var ff1 = ()=>abs.forEach(ab=>f1(ab));
console.log(sync(2000,ff0));
console.log(sync(2000,ff1));
