
const _S = String;
const _is           = Object.is;
const {istof,is_num}       = require("nv-facutil-typis");
const {_u,_n,_t,_f} = require("nv-facutil-untf");
const _zigzag   = require("nv-number-zigzag");
const _utf16    = require("nv-buf-jstr");

const BytesNeededForVarint = (value) => {
    let result = 0;
    do {
        result++;
        value >>= 7;
    } while(value);
    return(result);
}

const IsOneByte = (s) => {
   for(let i=0;i<s.length;++i) {
       if(s[i].charCodeAt(0) <256) {
       } else {
           return(_f)
       }
   }
   return(_t) 
}

const IsTwoByte = (s) => !IsOneByte(s);

const IsNaNAt = (u8a,si) => {
   let dv = new DataView(u8a.buffer);
   let r  = dv.getFloat64(si,_t);
   return(_is(r,NaN)) 
}


const kFastElementsKindSequence = {
    PACKED_SMI_ELEMENTS:0,
    HOLEY_SMI_ELEMENTS:1,
    PACKED_DOUBLE_ELEMENTS:2,
    HOLEY_DOUBLE_ELEMENTS:3,
    PACKED_ELEMENTS:4,
    HOLEY_ELEMENTS:5,
}

const GetArrayForEachLength = (arr) => {
   let cnt = 0;
   arr.forEach(r=> {++cnt;});
   return(cnt)
}
/*
const GetArrayForOfLength = (arr) => {
   let cnt = 0;
   for(let e of arr) {++cnt;}
   return(cnt)
}

const GetArrayForInLength = (arr) => {
   let cnt = 0;
   for(let e in arr) {++cnt;}
   return(cnt)
}

*/

const IsArrayHasHole = (arr)=> GetArrayForEachLength(arr)!== arr.length;

const IsSmi = (n) => Number.isInteger(n) && (!Object.is(n,-0)) && _zigzag.is_smi(n);

const GetArrayPackedInfo = (arr)=> {
     let is_packed_smi    = _t;
     let is_packed_double = _t;
     let i=0;
     while(i<arr.length){
         if(is_packed_smi && IsSmi(arr[i])) {

         } else if(is_num(arr[i])) {
             is_packed_smi = _f;
         } else {
             is_packed_smi       = _f;
             is_packed_double    = _f;
             break;
         }
         ++i;
     }
     return({
         is_packed_smi,
         is_packed_double
     })
}

const UTF8_DECODER = new TextDecoder();

const Utf8U8aToStr = (u8a,si,sz,decd) => {
    let nu8a = new Uint8Array(u8a.buffer,si,sz);
    if(decd) {
        return(decd(nu8a))
    } else {
        return(UTF8_DECODER.decode(nu8a))
    }
}

const LATIN1_DECODER = new TextDecoder("latin1");
const Latin1U8aToStr = (u8a,si,sz) => LATIN1_DECODER.decode(u8a.subarray(si,si+sz)); 


const UTF16_DECODER=new TextDecoder("utf-16");
const JstrU8aToStr = (u8a,si,sz) => UTF16_DECODER.decode(u8a.subarray(si,si+sz)); 



module.exports = {
    BytesNeededForVarint,
    IsOneByte,
    IsTwoByte,
    IsNaNAt,
    IsSmi,
    ////
    kFastElementsKindSequence,
    GetArrayForEachLength,
    IsArrayHasHole,
    GetArrayPackedInfo,
    ////
    Utf8U8aToStr,
    Latin1U8aToStr,
    JstrU8aToStr
}
