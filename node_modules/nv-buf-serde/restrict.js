module.exports = {
   kTheHole             :  'the hole element will be replaced by undefined',
   kSparseArray         :  `
	     NOT support. only dense/packed_smi/packed_double.
	     hard to explain this, refer to ./TEST/hole-tst.js
		this script will make sparse-array   
   `,
   kSharedArrayBuffer   :  'treated as normal ArrayBuffer',
   kArrayBufferView     :  `
       0. array-buffer-view will be treated as kHostObject,for compatible with nodjes delegate,
       event if several array-buf-views refer to the same buffer, still be deepcopy:
          var ab = new ArrayBuffer(4);
          var u8a = new Uint8Array(ab);
          var u16a = new Uint16Array(ab);
          var ary = [ab,u8a,u16a];
          var dupe_ary = der(ser(ary));
          /*
               1. dupe_ary[0]  
               2. dupe_ary[1].buffer
               3. dupe_ary[2].buffer

               [1. 2. 3.] are different buffer, this means:
                   the abview NOT support keeping the ref-of-<.buffer>-relations
          */
   `,
   JSMap                :  "extra attributes set On Map will be dropped, for compatible to current v8-impl",
   JSSet                :  "extra attributes set On Set will be dropped, for compatible to current v8-impl",	
   RegExp               :  "extra attributes set On RegExp will be dropped, for compatible to current v8-impl",
   Date                 :  "extra attributes set On Date will be dropped, for compatible to current v8-impl",	
   PrimitiveWrapper     :  `
        extra attributes set On PrimitiveWrapper will be dropped, for compatible to current v8-impl;
	not support <new BigInt>, in c++ layer ,it can be done, in js-layer ,impossible
   `,
   ////
   "Error'message"      :  "Error'message treated as string",
   "Error'stack"        :  "Error'stack treated as string",   
   ////
   kVerifyObjectCount   :   "no verify",     
   throwDetachedArrayBufferError  :  "dont know how to get this state in js-layer",
   kArrayBufferTransfer :  "hard to do this in js-layer",
   kSharedObject        :  'hard to do this in js-layer',
   kWasmModuleTransfer  :  'hard to do this in js-layer',
   kWasmMemoryTransfer  :  'hard to do this in js-layer',
   ITERATOR             :  "dont know how to get the iter cursor in js-layer, treated as a {}",
   ATOMICS              :  "dont know how to do this, treated as a {}",
   FPG                  :  "function | lambda | promise| generator|  all treated as a {}", 
   Proxy                :  "hard to do this in browser, so treated as the-target-be-proxied", 
}
