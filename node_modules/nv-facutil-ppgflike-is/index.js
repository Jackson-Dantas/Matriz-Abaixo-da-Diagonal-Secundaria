const _Y = Symbol;
const TAG$Y      = _Y.toStringTag;

const {_u,_n,_t,_f}  = require("nv-facutil-untf");
const {is_func_like} = require("nv-facutil-typis");

const get_prop_desc       = (o,k) => Object.getOwnPropertyDescriptor(o,k);
const get_arguments_desc  = (o)   => get_prop_desc(o,"arguments");
const hasno_arguments     = (o)   => get_arguments_desc(o) === _u;
const get_prot_desc       = (o)   => get_prop_desc(o,"prototype")
const hasno_prot_desc     = (o)   => get_prot_desc(o) === _u;


const is_prms = (o) => o[TAG$Y] === "Promise";
const is_sg   = (o) => o[TAG$Y]==='Generator';
const is_ag   = (o) => o[TAG$Y]==='AsyncGenerator';
const is_g    = (o) => is_sg(o) || is_ag(o);

const _is_acallable       = (o) => o.constructor.name === 'AsyncFunction';
const is_lmbd_or_mthd     = (o) => is_func_like(o) && hasno_prot_desc(o); 
const is_slmbd_or_smthd   = (o) => !_is_acallable(o) && is_lmbd_or_mthd(o);
const is_almbd_or_amthd   = (o) => _is_acallable(o) && is_lmbd_or_mthd(o);

const is_func             = (o) => is_func_like(o) && (get_prop_desc(o,"arguments") !== _u);
const is_sfunc_or_sgen    = (o) => is_func(o) && !_is_acallable(o);
const is_afunc_or_agen    = (o) => is_func(o) && _is_acallable(o);

const is_sgen  = (o)=> o.constructor.name === 'AsyncGeneratorFunction';
const is_agen  = (o)=> o.constructor.name === 'GeneratorFunction';
const is_gen   = (o)=> is_agen(o) || is_sgen(o);

const is_sfunc = (o)=> is_sfunc_or_sgen(o) && !is_gen(o);
const is_afunc = (o)=> is_afunc_or_agen(o) && !is_gen(o);

const is_native_code = (o)=>(o.toString()).includes("[native code]");

const is_cls  = (o)=> is_func_like(o) && !is_gen(o) && !_is_acallable(o) && hasno_arguments(o);


const is_iter = (o) => o[TAG$Y]?(o[TAG$Y].includes("Iterator")): _f;

////
const _incld_arrow_lit   = (o) => o.toString().split("\n")[0].includes("=>"); 
const slow_is_mthd   = (o) => is_lmbd_or_mthd(o) && !(_incld_arrow_lit(o));
const slow_is_lmbd   = (o) => is_lmbd_or_mthd(o) && _incld_arrow_lit(o);
const slow_is_slmbd  = (o) => slow_is_lmbd(o)    && !_is_acallable(o);  
const slow_is_smthd  = (o) => slow_is_mthd(o)    && !_is_acallable(o);
const slow_is_almdb  = (o) => slow_is_lmbd(o)    &&  _is_acallable(o);
const slow_is_amthd  = (o) => slow_is_lmbd(o)    &&  _is_acallable(o);

const _incld_function_lit    = (o) => o.toString().split("\n")[0].includes("function");
const slow_is_mthd_gen   = (o) => is_gen(o)  &&  !(_incld_function_lit(o));
const slow_is_mthd_sgen  = (o) => is_sgen(o) &&  !(_incld_function_lit(o));
const slow_is_mthd_agen  = (o) => is_agen(o) &&  !(_incld_function_lit(o));

const slow_is_getter  = (o) => is_lmbd_or_mthd(o) &&  o.toString().split("\n")[0].includes("get ");
const slow_is_setter  = (o) => is_lmbd_or_mthd(o) &&  o.toString().split("\n")[0].includes("set ");

////
const FUNC_LIKE_TNAMES = [
   "cls"  ,    
   "sfunc",    
   "afunc",    
   "sgen" ,    
   "agen" ,    
   "slmbd",    
   "almbd",    
   "smthd",    
   "amthd",    
   "mthd_sgen",
   "mthd_agen",
   "getter",   
   "setter", 
];
const func_like_tname = (o)=> {
	if(is_sgen(o))             {
	    if(_incld_function_lit(o)) { return("sgen"); } else { return("mthd_sgen");}
	} else if(is_agen(o))      {
	    if(_incld_function_lit(o)) { return("agen"); } else { return("mthd_agen");}
	} else {
	    if(hasno_prot_desc(o))   {  //lmbd OR mthd
		 if(_is_acallable(o)) {
		      if(_incld_arrow_lit(o)) {return("almbd");} else { return("amthd");}
		 } else {
		      if(_incld_arrow_lit(o)) {return("slmbd");} else { 
			   var lit = o.toString().split("\n")[0];
			   if(lit.includes("get "))        {  return("getter");
		           } else if(lit.includes("set ")) {  return("setter");
			   } else {
			       return("smthd");
			   }
		      }
		 }
	    } else                           {
		 if(hasno_arguments(o)) { 
		     return("cls");
		 } else {
		     if(_is_acallable(o)) { return("afunc");} else { return("sfunc");}
		 }
	    }
	}    
}


module.exports = {
   get_prop_desc,
       get_arguments_desc,
          hasno_arguments,
       get_prot_desc,
          hasno_prot_desc, 
   //// 
   is_prms,is_sg,is_ag,is_g,
   _is_acallable,
   is_lmbd_or_mthd,is_slmbd_or_smthd,is_almbd_or_amthd, 
   ////
   is_func,
   is_sfunc_or_sgen,is_afunc_or_agen,  
   is_sfunc,is_afunc, 
   is_sgen,is_agen,is_gen,
   is_sfunc,is_afunc, 
   is_cls, 
   is_iter, 
   is_native_code,
   ////
   slow_is_lmbd,      slow_is_mthd,  
   slow_is_slmbd,     slow_is_smthd,
   slow_is_almdb,     slow_is_amthd,
   slow_is_mthd_gen,
   slow_is_mthd_sgen,  
   slow_is_mthd_agen,
   slow_is_getter,    slow_is_setter,
   ////
   _incld_arrow_lit,
   _incld_function_lit,
   ////
   func_like_tname,
}

