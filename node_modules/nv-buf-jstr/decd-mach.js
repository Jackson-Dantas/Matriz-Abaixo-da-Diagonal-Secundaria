const _def = require("./decd-def");

const INIT    = 0;
const N       = 1;
const H       = 2;
const L       = 3;
const R       = 4;
const ERR     = 5;

const STATES = ["INIT","N","H","L","R","ERROR"]

const ERRORS = {
    in_error_must_reset:"in_error_must_reset",
    fst_b16_invalid:`fst b16 cant be <0b1111_11xx_xxxx_xxxx>`,
    low_invalid:`low must be <0b1111_11xx_xxxx_xxxx>`,
}



const _reset = (that) => {
   that[0] = 3; 
   that[1] = that[1] & 0b1111_0000;
   for(let i=2;i<5;i++) {
       that[i] =0
   } 
}

const _err_handle = (that,code,err) => {
    if(that.is_auto_recover_enabled()) {
        that.reset();
        return(undefined)
    } else {
        that[1] = (that[1] & 0b1111_0000) + ERR;
        that[2] = code;
        throw(new Error(err));
    }
}


class Mach extends Uint16Array {
    constructor(auto_recover=true) {
        super(5);
        this[0] = 3;                  //cursor-for-next
        this[1] = auto_recover?16:0;  // auto recover first-4  state  second 4
        this[2] = 0;                  //err data IF state===ERR
    }
    ////
    get cursor_()             {return(this[0])}  
    get state_code_()         {return(this[1] & 0b0000_1111)}
    get state_name_()         {return(STATES[this.state_code_])}
    is_init()                 {return(this.state_code_===INIT)}
    //is_normal()
    is_high()                 {return(this.state_code_===H)}
    //is_low()        
    is_err()                  {return(this.state_code_===ERR)}
    is_auto_recover_enabled() {return((this[1] & 0b1111_0000)  === 1)}
    enable_auto_recover()     {this[1] = (this[1] | 0b0001_0000)}
    disable_auto_recover()    {this[1] = (this[1] & 0b0000_1111)}
    ////
    get lefted_()              {return(Array.from(this).slice(3,this[0]))}
    get err_b16_()             {return(this[2])}
    ////
    input(s1) {
        let code = s1.charCodeAt(0);   
        if(this.is_init()) {
            if(_def.is_high_surrogate(code)) {
                this[3] = code;
                this[1] = (this[1] & 0b1111_0000) + H;
                this[0]++;
                return(undefined)
            } else if(_def.is_low_surrogate(code)) {
                 return(_err_handle(this,code,ERRORS.fst_b16_invalid))
            } else {
                 this.reset();
                 return(code);
            }
        } else if(this.is_high()) {
            if(_def.is_high_surrogate(code)) {
                return(_err_handle(this,code,ERRORS.low_invalid))
            } else if(_def.is_low_surrogate(code)) {
                code = _def.surrogate_to_code(this[3],code);
                this.reset();
                return(code)
            } else {
                return(_err_handle(this,code,ERRORS.low_invalid))
            }
        } else if(this.is_err()){
            return(new Error(ERRORS.in_error_must_reset))
        }
    }
    ////
    reset() {_reset(this)}
    ////
    dict() {
        return({
            cursor:this[0],
            state:this.state_name_,
            data:this.lefted_,
            err_b16:this.err_b16_
        })
    }
    ////
    get [Symbol.toStringTag]() {return(JSON.stringify(this.dict()))}
}
Mach.ALGN_OFFSET   = 3;
Mach.ALGN_SIZE     = 5;
const auto_recover_mach = new Mach(true);
const mach              = new Mach(false);

module.exports = {
   STATES,ERRORS, 
   Mach,
   auto_recover_mach,
   mach, 
}
