const _fs   = require("fs");
const _path = require("path");
const {_u,_n,_t,_f}       = require("nv-facutil-untf");
const {stat,_get_children_with_stat} = require("nv-file-sync-basic");
const {ser,der}=require("nv-buf-serde");

const _simple_walk_without_resolve = (
    p,pdata,pdepth,
    arr,max_depth
) => {
    var children = _get_children_with_stat(p,pdata["#stat"]);
    var depth    = pdepth +1;
    for(var child of children) {
        var cdata = stat(child);
        arr.push(cdata);
        if(cdata.type === "dir") {
            if(depth < max_depth) {
                _simple_walk_without_resolve(child,cdata,depth,arr,max_depth)
            } else {
            }
        } else {}
    }
}
const simple_walk = (p="./",max_depth=1)=> {
    p        = _path.resolve(p);
    var data = stat(p);
    var arr  = [];
    arr.push(data);
    var depth = 0;
    if(depth < max_depth) {
        _simple_walk_without_resolve(p,data,depth,arr,max_depth);
    } else {}
    return(arr);
}
const simple_all_dirs       = (p="./",max_depth=1) => simple_walk(p,max_depth).filter(r=>r.type==="dir");
const simple_all_files      = (p="./",max_depth=1) => simple_walk(p,max_depth).filter(r=>r.type==="file");
const simple_all_slinks     = (p="./",max_depth=1) => simple_walk(p,max_depth).filter(r=>r.type==="slink");
const simple_all_socks      = (p="./",max_depth=1) => simple_walk(p,max_depth).filter(r=>r.type==="sock");
const simple_all_blk_devs   = (p="./",max_depth=1) => simple_walk(p,max_depth).filter(r=>r.type==="blk_dev");
const simple_all_char_devs  = (p="./",max_depth=1) => simple_walk(p,max_depth).filter(r=>r.type==="char_dev");
const simple_all_fifos      = (p="./",max_depth=1) => simple_walk(p,max_depth).filter(r=>r.type==="fifo");
const simple_all_unknowns   = (p="./",max_depth=1) => simple_walk(p,max_depth).filter(r=>r.type==="unknown");
const simple_group_by_type  = (p="./",max_depth=1) => {
    var all = simple_walk(p,max_depth);
    var grp = {"dir":[],"file":[],"slink":[],"sock":[],"blk_dev":[],"char_dev":[],"fifo":[],"unknown":[]}
    for(var e of all) { grp[e.type].push(e)}
    return(grp)
}
const simple_group_path_by_type = (p="./",max_depth=1) => {
    var all = simple_walk(p,max_depth);
    var grp = { "dir":[],"file":[],"slink":[],"sock":[],"blk_dev":[],"char_dev":[],"fifo":[],"unknown":[]}
    for(var e of all) { grp[e.type].push(e.path)}
    return(grp)
}
const simple_group_by_ext  = (p="./", max_depth=1) => {
    var all = simple_walk(p,max_depth);
    var grp = {}
    for(var e of all) { 
        if(grp[e.ext]) {
            grp[e.ext].push(e)
        } else {
            grp[e.ext] = [e];
        }
   }
    return(grp)
}
const simple_group_path_by_ext = (p="./",max_depth=1) => {
    var all = simple_walk(p,max_depth);
    var grp = { }
    for(var e of all) {
        if(grp[e.ext]) {
            grp[e.ext].push(e)
        } else {
            grp[e.ext] = [e];
        }
    }
    return(grp)
}

const simple_group_by_bytsz  = (p="./",max_depth=1) => {
    var all = simple_walk(p,max_depth);
    var grp = {
        "0"          :[],
        "1_1023"     :[],
        "K"          :[], //[1024 1024*1024)
        "M"          :[], //[1024*1024 1024*1024*1024)
        "G"          :[], //[1024*1024*1024
    }
    for(var e of all) {
        if(e.type==="file") { 
            var bytsz = e["#stat"].size;
            if(bytsz == 0) {
                grp[0].push(e)
            } else if(bytsz>=1 && bytsz<1024) {
                grp["1_1023"].push(e)
            } else if(bytsz>=1024 && bytsz<1024*1024) {
                grp["K"].push(e)
            } else if(bytsz>=1024 && bytsz<1024*1024*1024) {
                grp["M"].push(e) 
            } else {
                grp["G"].push(e)
            }
        } else {
        }
    }
    grp[0].sort((a,b)=>a["#stat"].size - b["#stat"].size);
    grp["1_1023"].sort((a,b)=>a["#stat"].size - b["#stat"].size);
    grp["K"].sort((a,b)=>a["#stat"].size - b["#stat"].size);
    grp["M"].sort((a,b)=>a["#stat"].size - b["#stat"].size);
    grp["G"].sort((a,b)=>a["#stat"].size - b["#stat"].size);
    return(grp)
}
const simple_group_path_by_bytsz = (p="./",max_depth=1) => {
    var all = simple_group_by_bytsz(p,max_depth);
    for(let k in all) { all[k] = all[k].map(r=>[r.path,r["#stat"].size])}
    return(all)
}

const _simple_walk_with_cb = (
    p,pdata,pdepth,pnd,
    recv_and_rtrn_cnd     = (pnd,cdata,depth,pdata)  => { var cnd ={}; pnd[cdata.name] = cnd; return(cnd);},
    treat_as_empty_dir_cb = (cdata,depth)      => false
) => {
    var children = _get_children_with_stat(p,pdata["#stat"]);
    var depth    = pdepth +1;
    for(var child of children) {
        var cdata = stat(child);
        var cnd   = recv_and_rtrn_cnd(pnd,cdata,depth,pdata);
        if(cdata.type === "dir") {
            if(treat_as_empty_dir_cb(cdata,depth)) {
            } else {
                _simple_walk_with_cb(child,cdata, depth, cnd, recv_and_rtrn_cnd,treat_as_empty_dir_cb);
            }
        } else {}
    }
}
const simple_walk_to_dict = (p="./",max_depth=Infinity, incld_full_file_path=false,data_suffixes=[])=> {
    var p    = _path.resolve(p);
    var data = stat(p);
     var depth = 0;
    var cond  = (data.type === "dir");
    if(cond) {
        var nd    = {};
        var recv_and_rtrn_cnd     = (pnd,cdata,cdepth,pdata)  => { 
            if(cdata.type === "dir") {
                var cnd ={}; 
                pnd[cdata.name] = cnd; 
                return(cnd);
            } else {
		var incld = false;
		if(data_suffixes==='*') {
		    incld = true;
		} else {
		    for(let ext of data_suffixes) {if(cdata.ext.includes(ext)) {incld=true;break} else {}}
		}
		if(incld && (cdata.type === "file")) {
		    if(cdata.ext === ".json")           {
			pnd[cdata.name] = [cdata.base,                    cdata.type, JSON.parse(_fs.readFileSync(cdata.path).toString())];
		    } else if(cdata.ext === ".v8ser" || cdata.ext === ".mp" || cdata.ext === ".st")   {
			var buf = _fs.readFileSync(cdata.path);
			var ab  = buf.buffer.slice(buf.byteOffset,buf.byteOffset+buf.byteLength);
	                pnd[cdata.name] = [cdata.base,                    cdata.type, der(ab)];
		    } else if(
                        cdata.ext === ".txt"  || cdata.ext===".text"  ||
			cdata.ext === ".js"   || cdata.ext===".cjs"   || cdata.ext === ".mjs" || cdata.ext === ".ts"||
			cdata.ext === ".html" || cdata.ext===".xml"   ||
			cdata.ext ===".css"   || cdata.ext ===".scss" ||
			cdata.ext === ".gyp"  || cdata.ext ===".gypi" ||
			cdata.ext === ".mk"   || (cdata.name.toLowerCase() === "makefile") ||
			cdata.ext ===".sh"    ||
			cdata.ext ===".h"     || cdata.ext===".hpp"    ||  cdata.ext===".c"     ||  cdata.ext===".cc" ||  cdata.ext===".cpp" ||
                        cdata.ext === ".md"   || cdata.ext === ".cfg"  || cdata.ext === ".conf" 
		    ) {
		        pnd[cdata.name] = [cdata.base,                    cdata.type, _fs.readFileSync(cdata.path).toString()];
		    } else { //treat as buffer
                        pnd[cdata.name] = [cdata.base,                    cdata.type, _fs.readFileSync(cdata.path)];
		    }
		} else           {
                    pnd[cdata.name]     = [cdata.base,                    cdata.type, null];
		}
		////
		if(incld_full_file_path) {pnd[cdata.name].push(cdata.path)}
		////
                return(null)
            }
        }
        var treat_as_empty_dir_cb = (cdata,cdepth)           => cdepth>=max_depth;
        _simple_walk_with_cb(p,data,depth,nd,recv_and_rtrn_cnd,treat_as_empty_dir_cb);
        return(nd)
    } else   {

    }
}





const simple_walk_only_dir_to_dict = (p="./",max_depth=Infinity)=> {
    var p    = _path.resolve(p);
    var data = stat(p);
     var depth = 0;
    var cond  = (data.type === "dir");
    if(cond) {
        var nd    = {};
        var recv_and_rtrn_cnd     = (pnd,cdata,cdepth,pdata)  => {
            if(cdata.type === "dir") {
                var cnd ={};
                pnd[cdata.name] = cnd;
                return(cnd);
            } else {
                return(null)
            }
        }
        var treat_as_empty_dir_cb = (cdata,cdepth)           => cdepth>=max_depth;
        _simple_walk_with_cb(p,data,depth,nd,recv_and_rtrn_cnd,treat_as_empty_dir_cb);
        return(nd)
    } else   {

    }
}



const _walk_without_resolve = (
     p,pdata,
     rslt_filter,   rslt_fmter,
     visit_filter,
     arr
) => {
     let children = _get_children_with_stat(p,pdata["#stat"]);
     for(let child of children) {
          let cdata = stat(child);
              let should_push = rslt_filter(cdata);
              if(should_push) {arr.push(rslt_fmter(cdata))} else {}
              if(cdata.type === "dir") {
              let should_visit = visit_filter(cdata);
                  if(should_visit) {
                       _walk_without_resolve(child,cdata,rslt_filter,   rslt_fmter,visit_filter,arr);
                  } else {
                  }
               } else {
          
               }
     }
}

const walk   = (
    p="./",
    rslt_filter  = (stat)=>_t,
    rslt_fmter   = (stat)=>stat,
    visit_filter = (stat)=>_t,
) => {
    p    = _path.resolve(p);
    let data = stat(p);
    let arr  = [];
    if(rslt_filter(data)) {arr.push(rslt_fmter(data))}
    if(data.type === 'dir') {
        if(visit_filter(data)) {
          _walk_without_resolve(
            p,data,
            rslt_filter, rslt_fmter,
            visit_filter,
            arr
          );
        } else {
        }
           return(arr)
    } else {
        return(arr)
    }
}



const find_all_js_ts_json = (p="./") => walk(
    p,
   (stat)=>(stat.ext===".ts" || stat.ext===".js" || stat.ext===".mjs"|| stat.ext===".json"),
   (stat)=>stat.path,    
   (stat)=>_t
);

const find_all_js_ts_json_exclude_package_json = (p="./") => walk(
    p,
   (stat)=>(
        stat.ext===".ts" || 
        stat.ext===".js" || 
        stat.ext===".mjs"|| 
        (
            stat.ext===".json" && 
            !(stat.base.endsWith("package-lock.json")) && 
            !(stat.base.endsWith("package.json"))
        )
   ),
   (stat)=>stat.path,
   (stat)=>_t
)

const find_all_js_ts_json_exclude_pkg$mcr$blk = (p="./") => walk(
    p,
   (stat)=>(
        (
            (
                (stat.ext===".ts" || stat.ext===".js" || stat.ext===".mjs") && 
                !(stat.base.endsWith("nvmcr.js")) && 
                !(stat.base.endsWith("nvblk.js")) && 
                !(stat.base.endsWith("nvblc.js")) 
            ) ||
            (
                stat.ext===".json" &&
                !(stat.base.endsWith("package-lock.json")) &&
                !(stat.base.endsWith("package.json"))
            )
        )
   ),
   (stat)=>stat.path,
   (stat)=>_t
);


const is_dir_exist_and_empty = (p)=> {
    if(_fs.existsSync(p)) {
       var d = stat(p);
       if(d.type === 'dir') {
	   var a = _fs.readdirSync(p);
	   if(a.length === 0) {
	       return([true,_path.resolve(p)])
	   } else {
	       return([false,`not-empty`])
	   }
       } else {
           return([false,`not-dir`])
       }
    } else {
       return([false,`not-exist`])
    }
}


module.exports = {
   simple_walk, simple_all_dirs ,simple_all_files, simple_all_slinks, simple_all_socks,simple_all_blk_devs,simple_all_char_devs,simple_all_fifos,simple_all_unknowns,
   simple_group_by_type,  simple_group_path_by_type,
   simple_group_by_ext,   simple_group_path_by_ext,
   simple_group_by_bytsz, simple_group_path_by_bytsz,
   _simple_walk_with_cb,  simple_walk_to_dict, simple_walk_only_dir_to_dict,
   walk,
   find_all_js_ts_json,
   find_all_js_ts_json_exclude_package_json,
   find_all_js_ts_json_exclude_pkg$mcr$blk,
   ////
   is_dir_exist_and_empty
}
