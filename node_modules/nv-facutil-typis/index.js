const _O = Object;


const TNAMED = {
   un:         'undefined',
   bl:         'boolean',
   str:        'string',
   num:        'number',
   obj:        'object',
   sym:        'symbol',
   bi:         'bigint',
   func_like:  'function'
}

const typof   = (o,tname) =>  typeof(o) === tname;
const istof   = (o,Cls)   =>  (o instanceof Cls);


const is_str  = (o) => typof(o,TNAMED.str);
const is_sym  = (o) => typof(o,TNAMED.sym);
const is_glb_sym     = (o) =>  Symbol.keyFor(o) !== undefined;
const is_non_glb_sym = (o) =>  Symbol.keyFor(o) === undefined;
const is_bi   = (o) => typof(o,TNAMED.bi);
const is_num  = (o) => typof(o,TNAMED.num);         // NaN | +Infinity | -Infinity | number

const is_nan          = (o) => _O.is(o,NaN); 
const is_pos_infi     = (o) => (o === +Infinity);
const is_neg_infi     = (o) => (o === -Infinity);
const is_abnormal_num = (o) => is_nan(o) || is_pos_infi(o) || is_neg_infi(o);

const is_normal_num   = (o) => !is_abnormal_num(o) && is_num(o) 

//// +0 AND -0 CANE be USED as FlAG  
const is_pos_zero = (o) => (1/o === +Infinity);
const is_neg_zero = (o) => (1/o === -Infinity);

/*
IEE754:
   +ZERO                   <00 00 00 00 00 00 00 00>
   -ZERO                   <00 00 00 00 00 00 00 80>
   NaN  is a range:
       xx xx xx xx xx xx f? 7f   // xx xx xx xx xx xx  GE 00 00 00 00 00 00
       xx xx xx xx xx xx f? ff   // xx xx xx xx xx xx  GE 00 00 00 00 00 00

   +Infinity :              <00 00 00 00 00 00 f0 7f>
   -Infinity :              <00 00 00 00 00 00 f0 ff>
*/


const is_func_like = (o) => typof(o,TNAMED.func_like);


module.exports = {
   TNAMED,
   typof,
      is_str,is_num,
      is_sym,
	 is_glb_sym,
         is_non_glb_sym,
      is_bi,
   istof,
   //// special consts
   is_abnormal_num,
       is_nan,
       is_pos_infi,is_neg_infi,
   ////
   is_normal_num,
   ////
   is_pos_zero,is_neg_zero, 
   ////
   is_func_like,
}
