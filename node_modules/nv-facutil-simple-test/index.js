const {
    is_node,
    add_getter,
    sort_dtb
} = require("nv-facutil-basic");

let perf;

if(is_node()) {
     perf  = require('perf_hooks').performance;
} else {
     perf  = performance
}


function sync(rounds,f,...args) {
    let start = perf.now();
    let c = 0;
    while(c<rounds) {
        f(...args);
        c= c+1
    }
    let end = perf.now();
    return({
        rounds,
        f,
        costed:end-start
    })
}

function cmp(rounds,funcs,...args) {
    let rslts = funcs.map(f=>sync(rounds,f,...args));
    sort_dtb(rslts,['costed']) 
    return(rslts)
}

function fastest(rounds,funcs,...args) {
    return(cmp(rounds,funcs,...args)[0])
}

function async(rounds,f,...args) {
    let p = (async function() {
        let start = perf.now();
        let c = 0;
        while(c<rounds) {
            await f(...args);
            c= c+1
        }
        let end = perf.now();
        return({
            rounds,
            f,
            costed:end-start
        })
    })();
    return(p)
}

async function acmp(rounds,funcs,...args) {
    let ps = funcs.map(f=>async(rounds,f,...args));
    let rslts = await Promise.all(ps);
    sort_dtb(rslts,['costed'])
    return(rslts)
}

async function afastest(rounds,funcs,...args) {
    let rslts = await cmp(rounds,funcs,...args);
    return(rslts[0])
}


module.exports.sync  = sync;
module.exports.async = async;
module.exports.cmp   = cmp;
module.exports.acmp  = acmp;
module.exports.fastest = fastest;
module.exports.afastest = afastest;

if(is_node()) {
    const async_hooks = require('async_hooks');
    const AHOOK_TYPES = [
      'FSEVENTWRAP',         'FSREQCALLBACK',
      'GETADDRINFOREQWRAP',  'GETNAMEINFOREQWRAP',
      'HTTPINCOMINGMESSAGE', 'HTTPCLIENTREQUEST',
      'JSSTREAM',            'PIPECONNECTWRAP',
      'PIPEWRAP',            'PROCESSWRAP',
      'QUERYWRAP',           'SHUTDOWNWRAP',
      'SIGNALWRAP',          'STATWATCHER',
      'TCPCONNECTWRAP',      'TCPSERVERWRAP',
      'TCPWRAP',             'TTYWRAP',
      'UDPSENDWRAP',         'UDPWRAP',
      'WRITEWRAP',           'ZLIB',
      'SSLCONNECTION',       'PBKDF2REQUEST',
      'RANDOMBYTESREQUEST',  'TLSWRAP',
      'Microtask',           'Timeout',
      'Immediate',           'TickObject',
      'PROMISE'
    ]
    module.exports.AHOOK_TYPES = AHOOK_TYPES;
    class Ahook {
        #cache = []
        #hook  
        constructor() {
            let cache = this.#cache;
            this.#hook = async_hooks.createHook({init(id, type,trigger,resource) {cache.push({id, type,trigger,resource})}});
        }
        enable() {this.#hook.enable();}
        disable() {this.#hook.disable();}
        clear() {this.#cache.splice(0,this.#cache.length)}
        get all_() {return(this.#cache)}
        get lst_() {return(this.#cache[this.length_-1])}
        get length_() {return(this.#cache.length)}
    }
    
    function _get(that,typ) {
        let all = that.all_;
        return(all.filter(r=>r.type=typ))
    }
    
    AHOOK_TYPES.forEach(
        fn=> {
            add_getter(Ahook,fn+'_',(that)=>_get(that,fn))
        }
    );

    module.exports.Ahook = Ahook;

    ////
    let MEM = process.memoryUsage();
    const mem_change = ()=> {
       let mem = process.memoryUsage();
       let d = {}
       for(let k in mem) {
           d[k] = mem[k]-MEM[k]
       }
       MEM = mem;
       return(d) 
    }
    module.exports.mem_change = mem_change;
    ////
    const child_process = require("child_process");
    module.exports.sh = (cmd)=>console.log(child_process.execSync(cmd).toString());
} else {

}


const {_stack} = require("nv-error-simple-trace")

const $v           = (v,msg)=>{
    /*
    let stack = _stack();
    let depth = stack.length -1;
    msg = msg??stack[1];
    */
    console.log(`#${$v["#seq"]}  `+msg+' : ',v);
    $v["#seq"]++;
    return(v)
}
$v["#seq"] = 0;
$v.reset   =()=>{$v["#seq"]=0} 
module.exports.$v  = $v;


const OD             = Object.defineProperty;
const child_process  = require("child_process");
const _show          = (cmd)=>child_process.execSync("ls -l").toString();
OD(globalThis,"sh", {get:function(){return((cmd)=>console.log(_show(cmd)))}})
OD(globalThis,"_sh",{get:function(){return((cmd)=>_show(cmd))}})


